plugins {
    id "com.gradleup.shadow" version "${shadow_version}"
}

def wynntilsNeoForge = {
    var url = "https://github.com/Wynntils/Wynntils/releases/download/v${wynntils_version}/wynntils-${wynntils_version}-neoforge+MC-${minecraft_version}.jar"

    File file = new File("$projectDir/libs/artemis/${wynntils_version}.jar")
    file.parentFile.mkdirs()
    if (!file.exists()) {
        new URL(url).withInputStream { downloadStream ->
            file.withOutputStream { fileOut ->
                fileOut << downloadStream
            }
        }

        File modsFile = new File("$projectDir/run/mods/wynntils.jar")
        modsFile.parentFile.mkdirs()

        var os = new FileInputStream(file)

        modsFile.withOutputStream { fileOut ->
            fileOut << os
        }
    }

    files(file.absolutePath)
}


repositories {
    maven { url 'https://maven.neoforged.net/releases' }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${neoforge_version}"
    modRuntimeOnly "me.djtheredstoner:DevAuth-neoforge:${devauth_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixinextras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-neoforge:${mixinextras_version}"))

    modCompileOnly wynntilsNeoForge()
}

processResources {
    var replaceProperties = [
        mod_id                : mod_id,
        mod_version           : rootProject.version,
        minecraft_version     : neoforge_minecraft_version_range,
        neoforge_version_range: neoforge_version_range,
        loader_version_range  : neoforge_loader_version_range,
    ]
    inputs.properties replaceProperties

    filesMatching([
        'META-INF/neoforge.mods.toml',
        'pack.mcmeta'
    ]) {
        expand replaceProperties
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [
        project.configurations.shadowCommon
    ]

    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "neoforge+MC-${minecraft_version}"
    atAccessWideners.add loom.accessWidenerPath.get().asFile.name
}

jar {
    archiveClassifier = "dev"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
