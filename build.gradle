plugins {
    id "architectury-plugin" version "${architectury_plugin_version}"
    id "dev.architectury.loom" version "${architectury_loom_version}" apply false
    id "com.diffplug.spotless" version "${spotless_version}"
}

architectury {
    minecraft = minecraft_version
}

// Add "sequoia.hotswap=true" to your personal gradle properties file to use hotswap.
// By default, this is C:\Users\<your username>\.gradle\gradle.properties on Windows
// or ~/.gradle/gradle.properties on Linux/MacOS.
def usingHotswapAgent = project.hasProperty("sequoia.hotswap") ? project.getProperty("sequoia.hotswap") == "true" : false

version = "0.5.0-SNAPSHOT"

subprojects {
    apply plugin: "dev.architectury.loom"

    repositories {
        maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
    }

    loom {
        silentMojangMappingsLicense()

        accessWidenerPath = file("src/main/resources/sequoia.accessWidener")

        runs {
            client {
                property("devauth.configDir", getRootProject().file(".devauth").absolutePath)
                if (usingHotswapAgent) {
                    vmArgs "-XX:+AllowEnhancedClassRedefinition"
                    vmArgs "-XX:HotswapAgent=fatjar"
                }
                vmArgs "-ea"
                client()
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${parchment_version}@zip")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "com.diffplug.spotless"

    base {
        archivesName = archives_base_name
    }
    version = rootProject.version

    repositories {
        maven { url "https://maven.parchmentmc.org/" }
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.wispforest.io' }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(java_version))
        }
        withSourcesJar()
    }

    spotless {
        java {
            importOrder()
            removeUnusedImports()
            palantirJavaFormat(spotless_palantir_version)
            trimTrailingWhitespace()
            endWithNewline()
            custom "Refuse wildcard imports", {
                if (it =~ /\nimport .*\*;/) {
                    throw new AssertionError("Do not use wildcard imports. 'spotlessApply' cannot resolve this issue.")
                }
            }
            custom "Refuse IntelliJ annotations", {
                if (it =~ /\nimport org\.jetbrains\.annotations\./) {
                    throw new AssertionError("Do not use IntelliJ annotations. 'spotlessApply' cannot resolve this issue.")
                }
            }
            custom "No empty line after opening curly brace", {
                it.replaceAll(/\{\n\n/, '{\n')
            }
            licenseHeader("")
        }
        json {
            target "src/**/*.json"
            gson()
                    .indentWithSpaces(2)
                    .sortByKeys()
                    .version(spotless_gson_version)
            trimTrailingWhitespace()
            endWithNewline()
        }
        format "lang", {
            target "src/main/resources/assets/sequoia/lang/*.json"
            custom "No empty language json files", {
                it.replaceAll(/^\{\}\n$/, '')
            }
        }
        groovyGradle {
            target '**/*.gradle'
            greclipse("${spotless_greclipse_version}").configFile("${rootDir}/greclipse.properties")
            trimTrailingWhitespace()
            endWithNewline()
        }

        format "misc", {
            target "*.gradle", "*.md", ".gitignore", "*.properties"

            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
    }
}
