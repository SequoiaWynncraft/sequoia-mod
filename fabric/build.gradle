plugins {
    id "com.github.johnrengelman.shadow" version "${shadow_version}"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    implementation.extendsFrom shadowImplementation
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modRuntimeOnly "me.djtheredstoner:DevAuth-fabric:${devauth_version}"
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation(annotationProcessor("io.wispforest:owo-lib:${project.owo_lib_version}"))
    modImplementation(fabricApi.module("fabric-resource-loader-v0", fabric_version))

    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    shadowImplementation("net.neoforged:bus:${neoforge_eventbus_version}") {
        exclude group: "org.ow2.asm"
        exclude group: "org.apache.logging.log4j"
        exclude group: "cpw.mods", module: "modlauncher"
    }

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${mixinextras_version}")))
    include(implementation("org.java-websocket:Java-WebSocket:${java_websocket_version}"))

    testImplementation(common(project(path: ":common", configuration: "namedElements"))) { transitive false }
    testImplementation("net.fabricmc:fabric-loader-junit:${fabric_loader_version}")
    testImplementation("org.junit.jupiter:junit-jupiter:${junit_version}")
    testImplementation("org.assertj:assertj-core:${assertj_version}")
}

test {
    useJUnitPlatform()
}

var replaceProperties = [
    mod_id               : mod_id,
    mod_version          : rootProject.version,
    minecraft_version    : fabric_minecraft_version_range,
    fabric_version       : fabric_version,
    fabric_loader_version: fabric_loader_version,
    wynntils_version     : wynntils_version,
    owo_lib_version      : owo_lib_version
]
processResources {
    inputs.properties replaceProperties

    filesMatching("fabric.mod.json") {
        expand replaceProperties
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

jar {
    archiveClassifier = "dev"
}

shadowJar {
    configurations = [
        project.configurations.shadowCommon,
        project.configurations.shadowImplementation
    ]

    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    archiveClassifier = "fabric+MC-${minecraft_version}"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

tasks.test {
    workingDir = project.file("run")
}
